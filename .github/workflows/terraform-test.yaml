name: Terraform ECS Fargate CI Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.6.6
  PYTHON_VERSION: 3.11
  TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}


jobs:

  # 1. Lint, Format, Unit Tests
  validate:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Init & Validate
        run: |
          terraform init -backend=false
          terraform validate

      - name: Run TFLint
        uses: terraform-linters/setup-tflint@v1
        with:
          tflint_version: latest

      - name: Run Checkov (Security)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
      
      - name: Run tfsec (Security)
        uses: aquasecurity/tfsec-action@v1.0.0

  # 2. Component & Contract Tests
  component:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: pip install -r tests/component/requirements.txt

      - name: Run Component Tests
        run: pytest tests/component/

      - name: Run Contract Tests
        run: pytest tests/contract/

  # 3. Integration & Deployment Plan
  plan-integration:
    runs-on: ubuntu-latest
    needs: component
    steps:
      - uses: actions/checkout@v3

      - name: Terraform Init & Plan
        run: |
          terraform init
          terraform plan -out=tfplan

      - name: Upload tfplan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: tfplan

      - name: Run Integration Tests
        run: pytest tests/integration/

  # 4. Deploy to Staging and Run E2E, Acceptance, Resiliency, Performance
  deploy-and-test:
    runs-on: ubuntu-latest
    needs: plan-integration
    steps:
      - uses: actions/checkout@v3

      - name: Download tfplan
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: .

      - name: Terraform Apply
        run: terraform apply tfplan

      - name: End-to-End Tests
        run: python scripts/e2e_test.py

      - name: Acceptance Tests
        run: behave tests/acceptance/

      - name: Resiliency Test (Chaos)
        run: python scripts/resiliency_kill_task.py

      - name: Performance Test with k6
        uses: grafana/k6-action@v0.2.0
        with:
          filename: tests/performance/test.js

  # 5. Blue-Green Deployment and Post-Validation
  blue-green:
    runs-on: ubuntu-latest
    needs: deploy-and-test
    steps:
      - uses: actions/checkout@v3

      - name: Deploy Green
        run: terraform apply -var="deployment_color=green" -auto-approve

      - name: Post-Deployment Validation
        run: python scripts/health_check.py

  # 6. Rollback if Health Check Fails
  rollback:
    runs-on: ubuntu-latest
    needs: blue-green
    if: failure()
    steps:
      - uses: actions/checkout@v3

      - name: Rollback to Blue
        run: terraform apply -var="deployment_color=blue" -auto-approve

  # 7. SonarQube Analysis
  sonar:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v3

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

